// Test completo del sistema de lesiones integrado con IA
const API_BASE = 'http://localhost:5000/api';

async function createTestInjury() {
  console.log('üè• Creando lesi√≥n de prueba...');
  
  try {
    const response = await fetch(`${API_BASE}/users/1/injuries`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        titulo: 'Dolor lumbar',
        zona: 'Espalda baja',
        tipo: 'Muscular',
        gravedad: 'leve',
        fecha_inicio: new Date().toISOString(),
        causa: 'Mala postura',
        tratamiento: 'Fisioterapia',
        estado: 'activo',
        notas: 'Evitar ejercicios de impacto'
      })
    });

    const data = await response.json();
    console.log('‚úÖ Lesi√≥n creada:', data.success ? '√âxito' : 'Error');
    return data.success;
  } catch (error) {
    console.error('‚ùå Error creando lesi√≥n:', error.message);
    return false;
  }
}

async function testIAWithInjuries() {
  console.log('\nüß™ Testing IA con lesiones...');
  
  try {
    const response = await fetch(`${API_BASE}/ia/home-training/generate-today`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: 1,
        equipamiento: 'basico',
        tipoEntrenamiento: 'funcional'
      })
    });

    const data = await response.json();
    console.log('‚úÖ Response status:', response.status);
    
    if (data.success) {
      console.log('üéâ ¬°Entrenamiento generado con lesiones consideradas!');
      console.log('üìã T√≠tulo:', data.data.titulo);
      console.log('üè• Lesiones consideradas:', data.meta.profile_used.lesiones);
      console.log('üèãÔ∏è Ejercicios adaptados:');
      data.data.ejercicios.forEach((ej, i) => {
        console.log(`  ${i+1}. ${ej.nombre} - ${ej.notas}`);
      });
    } else {
      console.log('‚ùå Error:', data.error);
    }
  } catch (error) {
    console.error('‚ùå Error testing IA with injuries:', error.message);
  }
}

async function testMethodologyWithInjuries() {
  console.log('\nüß™ Testing metodolog√≠a con lesiones...');
  
  try {
    const response = await fetch(`${API_BASE}/ia/recommend-and-generate`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        userId: 1,
        profile: {
          objetivo_principal: 'rehabilitaci√≥n',
          frecuencia_semanal: 3
        },
        forcedMethodology: null
      })
    });

    const data = await response.json();
    console.log('‚úÖ Response status:', response.status);
    
    if (data.success) {
      console.log('üéâ ¬°Metodolog√≠a recomendada con lesiones consideradas!');
      console.log('üìã Metodolog√≠a:', data.data.methodology);
      console.log('üí° Raz√≥n:', data.data.reason);
      console.log('üè• Lesiones consideradas:', data.data.profile_used.lesiones);
    } else {
      console.log('‚ùå Error:', data.error);
    }
  } catch (error) {
    console.error('‚ùå Error testing methodology with injuries:', error.message);
  }
}

async function cleanupTestInjury() {
  console.log('\nüßπ Limpiando lesi√≥n de prueba...');
  
  try {
    // Obtener lesiones del usuario
    const response = await fetch(`${API_BASE}/users/1/injuries`);
    const data = await response.json();
    
    if (data.success && data.injuries.length > 0) {
      // Eliminar la √∫ltima lesi√≥n creada
      const lastInjury = data.injuries[0];
      const deleteResponse = await fetch(`${API_BASE}/injuries/${lastInjury.id}`, {
        method: 'DELETE'
      });
      
      const deleteData = await deleteResponse.json();
      console.log('‚úÖ Lesi√≥n eliminada:', deleteData.success ? '√âxito' : 'Error');
    }
  } catch (error) {
    console.error('‚ùå Error limpiando lesi√≥n:', error.message);
  }
}

// Ejecutar tests completos
async function runCompleteTest() {
  console.log('üöÄ Iniciando test completo del sistema de lesiones + IA\n');
  
  // 1. Crear lesi√≥n de prueba
  const injuryCreated = await createTestInjury();
  
  if (injuryCreated) {
    // 2. Probar IA de entrenamiento en casa con lesiones
    await testIAWithInjuries();
    
    // 3. Probar recomendaci√≥n de metodolog√≠a con lesiones
    await testMethodologyWithInjuries();
    
    // 4. Limpiar datos de prueba
    await cleanupTestInjury();
  }
  
  console.log('\n‚úÖ Test completo finalizado');
}

runCompleteTest();
